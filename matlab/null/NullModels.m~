classdef NullModels < handle
    
    methods (Access = private)
    %private so that you can't instatiate.
        function out = NullModels

        end
    end 
   
    methods(Static)
        
        function matrix = NULL_ER(MatrixOrSizeRows, sizeCols, ones)

            if(nargin == 1)

                [sizeRows sizeCols] = size(MatrixOrSizeRows);
                ones = sum(sum(MatrixOrSizeRows>0));

            else 
                 sizeRows = MatrixOrSizeRows;
            end

            tmpr=rand(sizeRows*sizeCols,1);
            [tmpy, tmps]=sort(tmpr);
            x=zeros(sizeRows,sizeCols);
            x(tmps(1:ones))=1;

            matrix = x;
        end
        
        function matrix = NULL_CE(sizeRows, sizeCols, probRows,probCols)
            
            if(nargin ==1)
                matrix = sizeRows;
                [sizeRows sizeCols] = size(matrix);
                probCols = sum(matrix)/sizeRows;
                probRows = sum(matrix,2)/sizeCols;
            end
            
            if(sizeRows ~= length(probRows))
                error('The row size is different from the assigned probabilities');
            end
            if(sizeCols ~= length(probCols))
                error('The column size is different from the assigned probabilities');
            end
            
            ss = size(probRows);
            if(ss(1) == 1); probRows = probRows'; end;
            
            pr = repmat(probRows,1,sizeCols);
            pc = repmat(probCols,sizeRows,1);
                      
            mat = (pr+pc)/2;
            matrix = rand(sizeRows,sizeCols) <= mat;

        end
        
        function matrix = NULL_ROW(sizeRows, sizeCols, probRows)
            %Return a random network in wich colums filling according to
            %probCols
            
            if(nargin ==1)
                matrix = sizeRows;
                [sizeRows sizeCols] = size(matrix);
                probRows = sum(matrix,2)/sizeCols;
            end
            
            if(sizeRows ~= length(probRows))
                error('The row size is different from the assigned probabilities');
            end
            
            matrix = rand(sizeRows, sizeCols) < repmat(probRows,1,sizeCols);
                        
        end
        
        function matrix = NULL_COL(sizeRows, sizeCols, probCols)

            if(nargin ==1)
                matrix = sizeRows;
                [sizeRows sizeCols] = size(matrix);
                probCols = sum(matrix)/sizeRows;
            end
            
            if(sizeCols ~= length(probCols))
                error('The column size is different from the assigned probabilities');
            end
            
            matrix = rand(sizeRows, sizeCols) < repmat(probCols,sizeRows,1);
            
        end
        
        function nullmodel = NULL_MODEL(matrix, nullfunction, replicates)
           
            RandStream.setDefaultStream(RandStream('mt19937ar','seed',sum(100*clock)));
            nrandom = zeros(trials,1);
            ss = size(matrix);
            nRows = ss(1);
            nCols = ss(2);
            nInteractions = sum(sum(matrix));
            pCols = sum(matrix)/nRows;
            pRows = sum(matrix,2)/nCols;
            p = nInteractions / (nRows * nCols);
            matrix = [];
            nestedness = {};
            
            for i = 1:trials

                switch nullmodel
                    case NullModel.BERNOULLI
                        matrix = MatrixGenerator.BernoulliRandomMatrix(nRows,nCols,p);
                    case NullModel.BERNOULLI_CONSTRAINED
                        matrix = MatrixGenerator.BernoulliConstrainedRandomMatrix(nRows,nCols,nInteractions);
                    case NullModel.COLUMN_FILLS
                        matrix = MatrixGenerator.ColumnRandomMatrix(nRows, nCols, pCols);
                    case NullModel.ROW_FILLS
                        matrix = MatrixGenerator.RowRandomMatrix(nRows, nCols, pRows);
                    case NullModel.AVERAGE_FILLS
                        matrix = MatrixGenerator.AverageRandomMatrix(nRows, nCols, pRows, pCols);
                end
                
                if(algorithm == NestedAlgorithm.BINMATNEST)
                    if(i == 1)
                        nestedness = NestednessBINMATNEST(matrix);
                        nestedness.DoGeometry = 1;
                        nestedness.Fill = p;
                    else
                        %nestedness = NestednessBINMATNEST(matrix);
                        nestedness.SetMatrix(matrix);
                        nestedness.DoGeometry = 0;
                    end
                    nestedness.CalculateNestedness;
                elseif(algorithm == NestedAlgorithm.NODF)
                    nestedness = Nestedness.NODF;
                    nestedness.CalculateNestedness;
                end
                
                nrandom(i) = nestedness.N;
                
                if(nargin == 5)
                    if(mod(i,printn) == 0)
                        fprintf('Trial #: %6i \t Fill:%f \t Nr:%f\n', i, nestedness.Fill,nestedness.N);
                    end
                end
                %imagesc(nestedness.Matrix);
                %drawnow;
            end
            
            nrandom = sort(nrandom);
            
        end
        
    end
end